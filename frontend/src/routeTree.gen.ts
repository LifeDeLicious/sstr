/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as UsersettingsImport } from './routes/usersettings'
import { Route as SessionsImport } from './routes/sessions'
import { Route as PostsImport } from './routes/posts'
import { Route as AnalysisImport } from './routes/analysis'
import { Route as AdminImport } from './routes/admin'
import { Route as IndexImport } from './routes/index'

// Create/Update Routes

const UsersettingsRoute = UsersettingsImport.update({
  id: '/usersettings',
  path: '/usersettings',
  getParentRoute: () => rootRoute,
} as any)

const SessionsRoute = SessionsImport.update({
  id: '/sessions',
  path: '/sessions',
  getParentRoute: () => rootRoute,
} as any)

const PostsRoute = PostsImport.update({
  id: '/posts',
  path: '/posts',
  getParentRoute: () => rootRoute,
} as any)

const AnalysisRoute = AnalysisImport.update({
  id: '/analysis',
  path: '/analysis',
  getParentRoute: () => rootRoute,
} as any)

const AdminRoute = AdminImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/admin': {
      id: '/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminImport
      parentRoute: typeof rootRoute
    }
    '/analysis': {
      id: '/analysis'
      path: '/analysis'
      fullPath: '/analysis'
      preLoaderRoute: typeof AnalysisImport
      parentRoute: typeof rootRoute
    }
    '/posts': {
      id: '/posts'
      path: '/posts'
      fullPath: '/posts'
      preLoaderRoute: typeof PostsImport
      parentRoute: typeof rootRoute
    }
    '/sessions': {
      id: '/sessions'
      path: '/sessions'
      fullPath: '/sessions'
      preLoaderRoute: typeof SessionsImport
      parentRoute: typeof rootRoute
    }
    '/usersettings': {
      id: '/usersettings'
      path: '/usersettings'
      fullPath: '/usersettings'
      preLoaderRoute: typeof UsersettingsImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/admin': typeof AdminRoute
  '/analysis': typeof AnalysisRoute
  '/posts': typeof PostsRoute
  '/sessions': typeof SessionsRoute
  '/usersettings': typeof UsersettingsRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/admin': typeof AdminRoute
  '/analysis': typeof AnalysisRoute
  '/posts': typeof PostsRoute
  '/sessions': typeof SessionsRoute
  '/usersettings': typeof UsersettingsRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/admin': typeof AdminRoute
  '/analysis': typeof AnalysisRoute
  '/posts': typeof PostsRoute
  '/sessions': typeof SessionsRoute
  '/usersettings': typeof UsersettingsRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/admin'
    | '/analysis'
    | '/posts'
    | '/sessions'
    | '/usersettings'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/admin' | '/analysis' | '/posts' | '/sessions' | '/usersettings'
  id:
    | '__root__'
    | '/'
    | '/admin'
    | '/analysis'
    | '/posts'
    | '/sessions'
    | '/usersettings'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AdminRoute: typeof AdminRoute
  AnalysisRoute: typeof AnalysisRoute
  PostsRoute: typeof PostsRoute
  SessionsRoute: typeof SessionsRoute
  UsersettingsRoute: typeof UsersettingsRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AdminRoute: AdminRoute,
  AnalysisRoute: AnalysisRoute,
  PostsRoute: PostsRoute,
  SessionsRoute: SessionsRoute,
  UsersettingsRoute: UsersettingsRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.jsx",
      "children": [
        "/",
        "/admin",
        "/analysis",
        "/posts",
        "/sessions",
        "/usersettings"
      ]
    },
    "/": {
      "filePath": "index.jsx"
    },
    "/admin": {
      "filePath": "admin.jsx"
    },
    "/analysis": {
      "filePath": "analysis.jsx"
    },
    "/posts": {
      "filePath": "posts.jsx"
    },
    "/sessions": {
      "filePath": "sessions.jsx"
    },
    "/usersettings": {
      "filePath": "usersettings.jsx"
    }
  }
}
ROUTE_MANIFEST_END */
